<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Kontronn</title>
    <link>https://www.kontronn.com/categories/linux/</link>
    <description>Recent content in Linux on Kontronn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 08 Jul 2023 22:28:31 -0400</lastBuildDate><atom:link href="https://www.kontronn.com/categories/linux/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux操作系统学习——启动</title>
      <link>https://www.kontronn.com/post/linux/linux-operating-system-study-boot.html</link>
      <pubDate>Sat, 08 Jul 2023 22:28:31 -0400</pubDate>
      
      <guid>https://www.kontronn.com/post/linux/linux-operating-system-study-boot.html</guid>
      <description>前言 Linux操作系统内核是服务端学习的根基，也是提高编程能力、源码阅读能力和进阶知识学习能力的重要部分，本文开始将记录Linux操作系统中的各个部分源码学习历程。
关于如何学习源码，个人觉得可以从以下角度入手，有效地提高阅读和学习的效率。（学习语言就不说了，这是基本功。学习IDE推荐Source Insight或者Visual Studio，网站源码阅读推荐woboq）
理解代码的组织结构。 以Linux源码举例，首先你得知道操作系统分为哪几个部分，他们单独做了什么功能，如何进行配合完成更为具体的功能。建立整体的印象有助于后续深入学习的时候方便理解，毕竟代码是用的不是看的，理解他的作用有利于理解为什么要这么做。
深入各个模块学习 模块接口： 这里推荐微软的画图工具visio或者思维导图xmind，用其画图可以将各个模块的接口列出，并绘制各个模块之间的关系，通过了解接口可以清楚各个模块之间的关系，即绘制模块组织图
工作流程： 通过上面一步得到各模块间的关系，然后实际用断点或log等方式看一看整体的工作流程，在模块组织图的基础上绘制程序流程图
模块粘合层： 我们的代码有很多都是用来粘合代码的，比如中间件（middleware）、Promises 模式、回调（Callback）、代理委托、依赖注入等。这些代码模块间的粘合技术是非常重要的，因为它们会把本来平铺直述的代码给分裂开来，让你不容易看明白它们的关系。这些可以作为程序流程图的补充，让其中本来无法顺畅衔接的地方变得通畅无阻。
模块具体实现： 这是最难得地方，涉及到大量具体源码的学习。深入细节容易迷失在细节的海洋里，因此需要有一些重点去关注，将非重点的内容省略。通过学习绘制模块具体架构图和模块的算法时序图，可以帮助你更好的掌握源码的精髓。
需要关注的包括 代码逻辑。 代码有两种逻辑，一种是业务逻辑，这种逻辑是真正的业务处理逻辑；另一种是控制逻辑，这种逻辑只是用控制程序流转的，不是业务逻辑。比如：flag 之类的控制变量，多线程处理的代码，异步控制的代码，远程通讯的代码，对象序列化反序列化的代码等。这两种逻辑你要分开，很多代码之所以混乱就是把这两种逻辑混在一起了。
重要的算法。 一般来说，我们的代码里会有很多重要的算法，我说的并不一定是什么排序或是搜索算法，可能会是一些其它的核心算法，比如一些索引表的算法，全局唯一 ID 的算法、信息推荐的算法、统计算法、通读算法（如 Gossip）等。这些比较核心的算法可能会非常难读，但它们往往是最有技术含量的部分。
底层交互。 有一些代码是和底层系统的交互，一般来说是和操作系统或是 JVM 的交互。因此，读这些代码通常需要一定的底层技术知识，不然，很难读懂。
可以忽略的包括 出错处理。 根据二八原则，20% 的代码是正常的逻辑，80% 的代码是在处理各种错误，所以，你在读代码的时候，完全可以把处理错误的代码全部删除掉，这样就会留下比较干净和简单的正常逻辑的代码。排除干扰因素，可以更高效地读代码。
数据处理。 只要你认真观察，就会发现，我们好多代码就是在那里倒腾数据。比如 DAO、DTO，比如 JSON、XML，这些代码冗长无聊，不是主要逻辑，可以不理。
忽略过多的实现细节。 在第一遍阅读源码时，已弄懂整体流程为主，至于具体的实现细节先简单的理清处过一遍，不用过于纠结。当梳理清楚全部的框架逻辑后，第二遍再深入的学习研究各个模块的实现，此时应该解决第一遍中的疑惑。第三遍可以跳出代码的实现，来看Linux的设计思路、编程艺术和演进之路。
重在实践。 Linux的代码都是可以调试的，看很多遍也许不如跟着调试走一遍，然后再自己修改修改做一些小测试。
传授知识。 当你能将知识讲述给别人听，并让别人听懂时，你已经可以自豪的说洞悉了这些知识。所以不妨从一个小的例子开始自说自话，看能不能自圆其说，甚至写成博客、做成PPT给大家讲解。
说了一大堆的废话，下面就正式开始操作系统的深入学习记录之旅了。
混沌初开 本文分析从按下电源键到加载BIOS以及后续bootloader的整个过程。犹如盘古开天辟地一般，该过程将混沌的操作系统世界分为清晰的内核态和用户态，并经历从实模式到保护模式的变化。这里先简单介绍一下名词，便于后续理解。
实模式（Real Mode)：又名 Real Address Mode，在此模式下地址访问的是真实地内存地址所在位置。在此模式下，可以使用20位（1MB）的地址空间，软件可以不受限制的操作所有地址的空间和IO设备。
保护模式（Protected Mode)：又名 Protected Virtual Address Mode，采用虚拟内存、页等机制对内存进行了保护，比起实模式更为安全可靠，同时也增加了灵活性和扩展性。
从启动电源到BIOS 当我们按下电源键，主板会发向电源组发出信号，接收到信号后，电源会提供合适的电压给计算机。当主板收到电源正常启动的信号后，主板会启动CPU。CPU重置所有寄存器数据，并设置初始化数据，这个初始化数据在X86架构里如下所示：
1IP 0xfff0 2CS selector 0xf000 3CS base 0xffff0000 4IP/EIP (Instruction Pointer) : 指令指针寄存器，记录将要执行的指令在代码段内的偏移地址 5CS（Code Segment Register）：代码段寄存器，指向CPU当前执行代码在内存中的区域（定义了存放代码的存储器的起始地址） 实模式采取内存段来管理 0 - 0xFFFFF的这1M内存空间，但是由于只有16位寄存器，所以最大地址只能表示为0xFFFFF（64KB)，因此不得不采取将内存按段划分为64KB的方式来充分利用1M空间。也就是上所示的，采取段选择子 + 偏移量的表示法。这种方法在保护模式中对于页的设计上也沿用了下来，可谓祖传的智慧了。具体的计算公式如下所示：</description>
    </item>
    
    <item>
      <title>Linux三剑客（grep,sed,awk）</title>
      <link>https://www.kontronn.com/post/linux/linux-three-musketeers.html</link>
      <pubDate>Sat, 08 Jul 2023 22:04:43 -0400</pubDate>
      
      <guid>https://www.kontronn.com/post/linux/linux-three-musketeers.html</guid>
      <description>&lt;p&gt;在Linux系统中，awk、grep、sed等命令被广泛用于文本处理。它们是非常强大的命令行工具，可以用于搜索、替换、过滤、排序等多种操作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在 Linux 中配置 IPv4 和 IPv6 地址</title>
      <link>https://www.kontronn.com/post/linux/how-to-configure-ipv4-and-ipv6.html</link>
      <pubDate>Sat, 08 Jul 2023 21:39:54 -0400</pubDate>
      
      <guid>https://www.kontronn.com/post/linux/how-to-configure-ipv4-and-ipv6.html</guid>
      <description>&lt;p&gt;IPv4和IPv6是Internet上常用的两种IP地址协议。在Linux系统中，您可以通过配置网络接口来设置IPv4和IPv6地址。本文将详细介绍如何在Linux中配置IPv4和IPv6地址。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux驱动IO篇——mmap操作</title>
      <link>https://www.kontronn.com/post/linux/linux-io-device-driver-mmap-operation.html</link>
      <pubDate>Thu, 22 Jun 2023 11:11:12 -0400</pubDate>
      
      <guid>https://www.kontronn.com/post/linux/linux-io-device-driver-mmap-operation.html</guid>
      <description>&lt;p&gt;平时我们写Linux驱动和用户空间交互时，都是通过&lt;code&gt;copy_from_user&lt;/code&gt;把用户空间传过来的数据进行拷贝，为什么要这么做呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux下SPI驱动详解</title>
      <link>https://www.kontronn.com/post/linux/linux-spi-device-driver-detailed-explanation.html</link>
      <pubDate>Wed, 21 Jun 2023 23:42:52 -0400</pubDate>
      
      <guid>https://www.kontronn.com/post/linux/linux-spi-device-driver-detailed-explanation.html</guid>
      <description>&lt;p&gt;SPI，是英语Serial Peripheral interface的缩写，顾名思义就是串行外围设备接口。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>什么是 nftables ? 它与 iptables 的区别是什么？</title>
      <link>https://www.kontronn.com/post/linux/difference-between-nftables-and-iptables.html</link>
      <pubDate>Tue, 20 Jun 2023 10:55:50 -0400</pubDate>
      
      <guid>https://www.kontronn.com/post/linux/difference-between-nftables-and-iptables.html</guid>
      <description>&lt;p&gt;几乎每个 Linux 管理员都使用过 iptables，它是一个 Linux 系统的防火墙。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux中pdf转word的工具你知道几个</title>
      <link>https://www.kontronn.com/post/linux/five-tools-to-convert-pdf-to-word-in-linux.html</link>
      <pubDate>Sun, 18 Jun 2023 11:06:12 -0400</pubDate>
      
      <guid>https://www.kontronn.com/post/linux/five-tools-to-convert-pdf-to-word-in-linux.html</guid>
      <description>&lt;p&gt;下面推荐5款Linux中pdf转word的工具&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux系统内核概述</title>
      <link>https://www.kontronn.com/post/linux/linux-kernel-overview.html</link>
      <pubDate>Sat, 17 Jun 2023 10:20:58 -0400</pubDate>
      
      <guid>https://www.kontronn.com/post/linux/linux-kernel-overview.html</guid>
      <description>&lt;p&gt;Linux 内核是一种开源的类 Unix 操作系统宏内核。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在 Linux 使用 pv 命令监控数据传输速度与进度</title>
      <link>https://www.kontronn.com/post/linux/using-pv-cmd-to-monitor-data-transfer-speed-and-progress.html</link>
      <pubDate>Fri, 16 Jun 2023 12:10:10 -0400</pubDate>
      
      <guid>https://www.kontronn.com/post/linux/using-pv-cmd-to-monitor-data-transfer-speed-and-progress.html</guid>
      <description>&lt;p&gt;pv 命令是一个在 Linux/Unix 系统的实用工具，用于监控数据的流动。pv 命令可以用于计算数据传输的速度，显示进度条以及估算剩余时间等。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
