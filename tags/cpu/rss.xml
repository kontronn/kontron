<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CPU on Kontronn</title>
    <link>https://www.kontronn.com/tags/cpu/</link>
    <description>Recent content in CPU on Kontronn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 22 Feb 2024 21:10:54 +0800</lastBuildDate><atom:link href="https://www.kontronn.com/tags/cpu/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一篇关于CPU的入门知识</title>
      <link>https://www.kontronn.com/post/hardware/basic-knowledge-of-cpu.html</link>
      <pubDate>Thu, 22 Feb 2024 21:10:54 +0800</pubDate>
      
      <guid>https://www.kontronn.com/post/hardware/basic-knowledge-of-cpu.html</guid>
      <description>不管你玩硬件还是做软件，你的世界都少不了计算机最核心的 —— CPU。
CPU是什么？ CPU与计算机的关系就相当于大脑和人的关系，它是一种小型的计算机芯片，通常嵌入在电脑的主板上。
 CPU  的构建是通过在单个计算机芯片上放置数十亿个微型晶体管来实现。
这些晶体管使它能够执行运行存储在系统内存中的程序所需的计算，所以，也可以说CPU决定了你电脑的计算能力。
CPU实际做什么？ CPU的工作核心是从程序或应用程序中获取指令并且执行计算。
这个过程一共有三个关键阶段：提取，解码和执行。
CPU先从系统的RAM中提取指令，随后解码该指令的实际内容，最后再由CPU的相关部分执行该指令。
CPU的内部结构 刚才提到了很多CPU的重要性，那么CPU的内部结构是什么呢？又是由什么组成的呢？
下图展示了一般程序的运行流程（以C语言为例），一般来说，了解程序的运行流程是掌握程序运行机制的基础和前提。
在这个流程中，CPU负责解释和运行最终转换成机器语言的内容，CPU主要由两部分构成：控制单元和算数逻辑单元（ALU）。
 控制单元：从内存中提取指令并解码执行； 算数逻辑单元（ALU）：处理算数和逻辑运算。  CPU和内存都是由许多晶体管组成的电子部件，可以把它比作计算机的心脏和大脑。
它能够接收数据输入、执行指令并且处理相关信息，它与输入/输出（I/O）设备进行通信，这些设备向 CPU 发送数据和从 CPU 接收数据。
从功能上来看，CPU的内容是由寄存器、控制器、运算器和时钟四部分组成的，各个部分之间通电信号来连通。
接下来简单介绍一下内存，为什么说到CPU需要讲一下内存呢？
因为内存是与CPU进行沟通的桥梁，计算机中所有程序的运行都在内存中得到运行的。
内存一般又被称为主存，它的作用是存放CPU中的运算数据，以及与硬盘等外部存储设备交换的数据。
CPU会在计算机运转时，把需要运算的数据调到主存中进行运算。
在运算完成之后，CPU将结果传送出来，主存的运行也决定了计算机的稳定运行。
主存一般通过控制芯片与CPU相连，由可读写的元素构成，每个字节都有一个地址编号。
CPU通过地址从主存中读取数据和指令，也可以根据地址写入数据，注意一点：当计算机关机时，内存中的指令和数据也会被清除。
CPU是寄存器的集合体 在CPU的四个结构中，寄存器的重要性远远高于其余三个，为什么这么说？因为程序通常是把寄存器作为对象来进行描述的。
而说到寄存器，就不得不说到汇编语言，说到汇编语言，就不得不说到高级语言，说起高级语言也就不得不提及语言的概念。
计算机语言 人和人之间最古老和直接的沟通媒介是语言，但是和计算机沟通，就必须按照计算机指令来交换，其中就涉及到语言的问题。
最早，为了解决计算机和人类的交流的问题，出现了汇编语言。
但是汇编语言晦涩难懂，所以又出现了像是C、C++、Java的这种高级语言，因此计算机语言一般分为低级语言和高级语言。
使用高级语言编写的程序，经过编译转换成机器语言后才能运行，而汇编语言经过汇编器才能转换为机器语言。
汇编语言 我们先来看一段采用汇编语言表示的代码清单：
这是采用汇编语言编写程序的一部分，汇编语言采用助记符来编写程序，每个原本是电信号的机器语言指令会有一个与其对应的助记符。
比如，mov,add分别是数据的存储（move）和相加（addition）的简写。
汇编语言和机器语言一一对应，这点和高级语言不同，我们通常把汇编语言编写的程序转换为机器语言的这个过程，称之为汇编。
与之相反，将机器语言转化为汇编语言的过程称之为反汇编。
汇编语言可以帮助你理解计算机做了什么工作，机器语言级别的程序通过寄存器来处理，上面代码中的eax,ebp都是表示的寄存器，它们是CPU内部寄存器的名称。
因此，可以说 CPU 是一系列寄存器的集合体。
一般，在内存中的存储通过地址编号来表示，寄存器的种类是通过名字来区分。
那些不同类型的CPU，其内部寄存器的种类、数量以及寄存器存储的数值范围也都是不同的。
不过，根据功能的不同，我们可以将寄存器划分为下面几类：
其中，程序计数器、标志寄存器、累加寄存器、指令寄存器和栈寄存器只有一个，其他寄存器一般有好几个。
程序计数器 程序计数器是用来存储下一条指令所在单元的地址。
程序在执行时，PC的初值作为程序第一条指令的地址，在顺序执行程序时，控制器先按照程序计数器所指出的指令地址，从内存中取出一条指令，随后分析和执行该指令，并同时将PC的值加1指向下一条要执行的指令。
我们可以通过一个事例来仔细看一下程序计数器的执行过程：
这是一段进行相加的操作，程序启动，在经过编译解析后，会经由操作系统把硬盘中的程序复制到内存中。
以上示例程序，就是将123和456执行相加的操作，随后将结果输出到显示器上，因为使用机器语言很难描述，所以这些都是经过翻译后的结果。
事实上，每个指令和数据都有可能分布在不同的地址上，但是为了更好的说明，就把组成一条指令的内存和数据放在了一个内存地址上。
地址0100是程序运行的起始位置，Windows等操作系统把程序从硬盘复制到内存以后，就会将程序计数器作为设定为起始位置0100，然后再执行程序，每次执行一条指令后，程序计数器的数值就会增加1，或者是直接指向下一条指令的地址。
随后，CPU会根据程序计数器的数值，从内存中读取命令并且执行，换言之，程序计数器控制着程序的流程。
条件分支和循环机制 小伙伴们都学过高级语言，高级语言汇总的条件控制流程主要分为顺序执行、条件分支、循环判断三种。
 顺序执行是按照地址的内容顺序的执行命令。 条件分支是根据条件执行任意地址的指令。 循环是重复执行同一地址的指令。  一般情况下，顺序执行的情况较简单，每次执行一条指令程序计数器的值就是+1。</description>
    </item>
    
    <item>
      <title>将 CPU 与 FPGA Fabrics 结合使用的案例</title>
      <link>https://www.kontronn.com/post/fpga/example-of-using-cpu-and-fpga.html</link>
      <pubDate>Sat, 23 Dec 2023 11:06:18 +0800</pubDate>
      
      <guid>https://www.kontronn.com/post/fpga/example-of-using-cpu-and-fpga.html</guid>
      <description>&lt;p&gt;如何在规模效益下降时继续推动性能提升，本文就介绍一个将 CPU 与 FPGA Fabrics 结合使用的案例。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AMD下一代处理器进化！正式迈入3nm，混合使用三星4nm工艺</title>
      <link>https://www.kontronn.com/post/soc/amd-next-generation-chips-will-use-3nm-and-4nm-manufacture-technology.html</link>
      <pubDate>Sun, 19 Nov 2023 13:17:01 +0800</pubDate>
      
      <guid>https://www.kontronn.com/post/soc/amd-next-generation-chips-will-use-3nm-and-4nm-manufacture-technology.html</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://www.gaitpu.com/tag/amd&#34; title=&#34;AMD&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    AMD
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;这几年的处理器和GPU芯片一直和台积电有着积极的合作，处理器和显卡都已经用上了台积电的5nm工艺。而从最新的报道来看，在下一代处理器，AMD很可能用上台积电的3nm工艺，不过具体是不是Zen 5现在还要打上一个问号，目前来看更大可能是Zen 5C这样的小核心会用上台积电最新的先进工艺。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CPU、MPU、MCU和SOC的简介</title>
      <link>https://www.kontronn.com/post/mcu/introduction-of-cpu-mpu-mcu-soc.html</link>
      <pubDate>Fri, 23 Jun 2023 08:13:55 -0400</pubDate>
      
      <guid>https://www.kontronn.com/post/mcu/introduction-of-cpu-mpu-mcu-soc.html</guid>
      <description>&lt;p&gt;在嵌入式开发中，我们会经常看到或接触一些专业术语，例如CPU、MPU、MCU和SOC等，并且这些专业术语出现的频率也是非常之高，在面试中也常常会作为提问的知识点，下面我们就来看一下他们之间的特点和区别。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
