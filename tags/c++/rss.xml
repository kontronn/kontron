<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Kontronn</title>
    <link>https://www.kontronn.com/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Kontronn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 27 Apr 2024 19:31:47 +0800</lastBuildDate><atom:link href="https://www.kontronn.com/tags/c++/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43;中的临时对象</title>
      <link>https://www.kontronn.com/post/programming/temporary-object-in-c-plus-plus.html</link>
      <pubDate>Sat, 27 Apr 2024 19:31:47 +0800</pubDate>
      
      <guid>https://www.kontronn.com/post/programming/temporary-object-in-c-plus-plus.html</guid>
      <description>临时对象 Temporary object，临时对象。一听名字就明白，这个对象的意义不大，只是临时中转一下或者存在一下，有的可能连个存在感都刷不到就消失了。但不要小看这种临时对象，对C/C++这种以效率严苛为前提的编程环境下，它就是效率低下的某种代名词。 但是，临时对象又无法完全避免，所以，怎么控制并减少临时对象的产生就是一个技术活儿了。
产生的时机 那么，在什么情况下会产生临时对象呢？在不同的编译器和不同的标准下，可能都有所不同，下面就分析一下产生临时对象的具体场景：
参数传递 一般值传递对象都会产生临时的对象：
#include &amp;lt;iostream&amp;gt; class Teacher { public: Teacher() { std::cout &amp;lt;&amp;lt; &amp;#34;call Teacher construct func,old_ default is:&amp;#34; &amp;lt;&amp;lt; old_ &amp;lt;&amp;lt; std::endl; } Teacher(int old) : old_(old) { std::cout &amp;lt;&amp;lt; &amp;#34;call Teacher construct func,set old_ is:&amp;#34; &amp;lt;&amp;lt; old_ &amp;lt;&amp;lt; std::endl; } Teacher(const Teacher &amp;amp;t) { std::cout &amp;lt;&amp;lt; &amp;#34;call Teacher copy construct func&amp;#34; &amp;lt;&amp;lt; std::endl; } ~Teacher() { std::cout &amp;lt;&amp;lt; &amp;#34;call Teacher deconstruct func!&amp;#34; &amp;lt;&amp;lt; std::endl; } public: int old_ = 10; }; void TestPars(Teacher t) { std::cout &amp;lt;&amp;lt; &amp;#34;Teacher old is:&amp;#34; &amp;lt;&amp;lt; t.</description>
    </item>
    
    <item>
      <title>程序员的十大优秀编码习惯</title>
      <link>https://www.kontronn.com/post/programming/top-10-best-coding-habits-for-programmers.html</link>
      <pubDate>Mon, 01 Apr 2024 16:43:01 +0800</pubDate>
      
      <guid>https://www.kontronn.com/post/programming/top-10-best-coding-habits-for-programmers.html</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.kontronn.com/imgs/post/programming-tips.png&#34; alt=&#34;Programming Tips&#34;&gt;&lt;/p&gt;
&lt;p&gt;在C++编程的世界中，良好的编码习惯是提高代码质量、可维护性和可读性的关键。作为一名C++程序员，我们应该时刻关注并遵循这些优秀的编码习惯，让我们的代码更加清晰、高效。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>你了解C 和 C&#43;&#43; 标准库吗</title>
      <link>https://www.kontronn.com/post/programming/do-you-understand-c-and-c-plus-plus-standard-library.html</link>
      <pubDate>Sun, 01 Oct 2023 18:51:43 +0800</pubDate>
      
      <guid>https://www.kontronn.com/post/programming/do-you-understand-c-and-c-plus-plus-standard-library.html</guid>
      <description>&lt;p&gt;本文简要介绍编写 C/C++ 应用程序的领域，标准库的作用以及它是如何在各种操作系统中实现的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;中fmt库的用法</title>
      <link>https://www.kontronn.com/post/programming/fmt-lib-usage-in-c-plus-plus.html</link>
      <pubDate>Tue, 08 Aug 2023 12:50:06 -0400</pubDate>
      
      <guid>https://www.kontronn.com/post/programming/fmt-lib-usage-in-c-plus-plus.html</guid>
      <description>&lt;p&gt;本来这篇文章应该接着介绍 memset 的，但是我暂时不想写那个主题。这次就写点新的东西。介绍一下 fmt 库。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>取代C&#43;&#43;？谷歌开源编程语言Carbon</title>
      <link>https://www.kontronn.com/post/programming/google-open-source-programming-language-carbon.html</link>
      <pubDate>Sun, 16 Jul 2023 02:12:27 -0400</pubDate>
      
      <guid>https://www.kontronn.com/post/programming/google-open-source-programming-language-carbon.html</guid>
      <description>&lt;p&gt;号称替代C++，谷歌发布新的编程语言，已经过去了一年。去年7月，在多伦多举办的CppNorth大会上，谷歌宣布正式开源内部打造的编程语言Carbon，并称他是C++的继任者。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
