<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UART on Kontronn</title>
    <link>https://www.kontronn.com/tags/uart/</link>
    <description>Recent content in UART on Kontronn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 07 Sep 2024 20:34:41 +0800</lastBuildDate><atom:link href="https://www.kontronn.com/tags/uart/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何计算串口的传输速率</title>
      <link>https://www.kontronn.com/post/hardware/how-to-calculate-uart-rate.html</link>
      <pubDate>Sat, 07 Sep 2024 20:34:41 +0800</pubDate>
      
      <guid>https://www.kontronn.com/post/hardware/how-to-calculate-uart-rate.html</guid>
      <description>1960年代，DEC（Digital Equipment Corp）公司的Gordon Bell采用大约50个分离元件设计了一个电路板，发明了 UART串口  。
前言 时至今日，已经60多年，虽然在个人消费类电子产品中，UART已近乎绝迹；但在工业、科研、国防、航空/航天等领域，UART却无处不在。
很多从事多年 嵌入式  开发的朋友居然还不会根据波特率计算UART的速率，下面和大家介绍一下计算方法。
uart帧格式 要证明速率的计算，必须搞清楚uart数据帧格式
其中各位的意义如下：
 起始位：先发出一个逻辑 &amp;ldquo;0&amp;rdquo; 信号，表示传输字符的开始 数据位：可以是5~8位逻辑 &amp;ldquo;0&amp;rdquo; 或 &amp;ldquo;1&amp;rdquo;，如ASCII码（7位），扩展BCD码（8位），小端传输 校验位：数据位加上这一位后，使得 &amp;ldquo;1&amp;rdquo; 的位数应为偶数(偶校验)或奇数(奇校验) 停止位：它是一个字符数据的结束标志。可以是1位、1.5位、2位的高电平[通常为1位] 空闲位：处于逻辑&amp;quot;1&amp;quot;状态，表示当前线路上没有资料传送  例如我们传输数据0X33（00110011），那么对应的波形就是如下这样，因为是LSB在前，所以8位数据依次是11001100。
由上图可得，
假设没有奇偶校验位，停止位为1位 要传输1个字节（8个bit）数据， 那么实际硬件上需要传输10位（1个起始位，8个数据位，1个停止位）
如果有奇偶校验位，停止位为1位 要传输1个字节（8个bit）数据， 那么实际硬件上需要传输11位（1个起始位，8个数据位，1个奇偶校验位，1个停止位）
波特率、比特率 波特率 UART速率，也称为波特率，是指数据在串行通信中每秒钟传输的位数（包含起始位、数据位、校验位、停止位）。
比如：115200波特率意思就是在二进制传输条件下每秒传输115200个比特。
比特率 比特率也叫信息传输速率，单位时间传递的平均信息量或比特数（只包含有效的数据位）。
比特率通常以bps（bits per second）表示。
速率计算 比特率与波特率计算公式是：
比如没有奇偶校验位，停止位为1位，波特率115200对应的比特率为
比特率 = （115200*8 ）/(1个起始位 + 8个数据位 + 0个奇偶校验位 + 1个停止位) = 115200*8/10 = 11520*8 b/s 转换为字节 就是11520 B/s，即每秒传输11520个字节（帧） </description>
    </item>
    
    <item>
      <title>梳理STM32芯片的内部架构</title>
      <link>https://www.kontronn.com/post/soc/STM32-chip-internal-architecture.html</link>
      <pubDate>Sun, 22 Oct 2023 20:55:44 +0800</pubDate>
      
      <guid>https://www.kontronn.com/post/soc/STM32-chip-internal-architecture.html</guid>
      <description>&lt;p&gt;STM32芯片主要由内核和片上外设组成，STM32F103采用的是Cortex-M3内核，内核由
&lt;a href=&#34;https://www.vxworks.net/arm&#34; title=&#34;ARM&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    ARM
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;公司设计。STM32的芯片生产厂商ST，负责在内核之外设计部件并生产整个芯片。这些内核之外的部件被称为核外外设或片上外设，如 GPIO、USART（串口）、I2C、SPI 等。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>芯片设计中的uart模块</title>
      <link>https://www.kontronn.com/post/soc/uart-module-in-chip-design.html</link>
      <pubDate>Sun, 08 Oct 2023 22:17:50 +0800</pubDate>
      
      <guid>https://www.kontronn.com/post/soc/uart-module-in-chip-design.html</guid>
      <description>&lt;p&gt;在芯片设计中，UART（Universal Asynchronous Receiver/Transmitter，通用异步接收/发送器）模块是一个非常重要的外设模块。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>常见总线：IIC、IIS、SPI、UART、JTAG、CAN、SDIO、GPIO</title>
      <link>https://www.kontronn.com/post/hardware/usual-bus-protocol-introduction.html</link>
      <pubDate>Fri, 06 Oct 2023 11:39:39 +0800</pubDate>
      
      <guid>https://www.kontronn.com/post/hardware/usual-bus-protocol-introduction.html</guid>
      <description>&lt;p&gt;本文介绍了常见的总线：IIC、IIS、SPI、UART、JTAG、CAN、SDIO、GPIO。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RS422/485接口电路设计要点</title>
      <link>https://www.kontronn.com/post/hardware/design-points-of-rs422-485-circuit.html</link>
      <pubDate>Thu, 13 Jul 2023 11:28:21 -0400</pubDate>
      
      <guid>https://www.kontronn.com/post/hardware/design-points-of-rs422-485-circuit.html</guid>
      <description>&lt;p&gt;RS-422标准全称是“平衡电压数字接口电路的电气特性”，它定义了接口电路的特性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>动图演示常用通信协议原理</title>
      <link>https://www.kontronn.com/post/hardware/animation-demonstrates-principles-of-common-communication-protocols.html</link>
      <pubDate>Sun, 02 Apr 2023 00:00:24 -0400</pubDate>
      
      <guid>https://www.kontronn.com/post/hardware/animation-demonstrates-principles-of-common-communication-protocols.html</guid>
      <description>&lt;p&gt;本文分享电子系统中信号波形的动图，有助于帮助我们理解传输的机理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>分享一种通信协议的应用编程原理和思路</title>
      <link>https://www.kontronn.com/post/linux/communication-protocol-programming-principle-and-idea.html</link>
      <pubDate>Mon, 19 Dec 2022 08:57:23 -0500</pubDate>
      
      <guid>https://www.kontronn.com/post/linux/communication-protocol-programming-principle-and-idea.html</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;嵌入式开发过程中，&lt;code&gt;UART&lt;/code&gt;、 &lt;code&gt;CAN&lt;/code&gt;、 &lt;code&gt;USB&lt;/code&gt;等通信基本离不开通信协议。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面给大家分享一种通信协议（MAVLink）在应用编程中的编程原理和思路。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks 6.8下基于QT的串口编程</title>
      <link>https://www.kontronn.com/post/vxworks/vxworks-6.8-qt-uart-programming.html</link>
      <pubDate>Fri, 07 Oct 2022 05:35:25 -0400</pubDate>
      
      <guid>https://www.kontronn.com/post/vxworks/vxworks-6.8-qt-uart-programming.html</guid>
      <description>&lt;p&gt;文章简要记录了&lt;code&gt;VxWorks 6.8&lt;/code&gt;下基于&lt;code&gt;Qt&lt;/code&gt;实现的&lt;code&gt;串口&lt;/code&gt;编程。&lt;/p&gt;
&lt;p&gt;相关的&lt;code&gt;VxWorks&lt;/code&gt; 和 &lt;code&gt;串口&lt;/code&gt;，请参阅 
&lt;a href=&#34;https://vxworks.net/app/22-serial-programming-for-vxworks&#34; title=&#34;VxWorks下的串口测试程序设计和源码&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks下的串口测试程序设计和源码
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks操作系统下的串口读写程序</title>
      <link>https://www.kontronn.com/post/vxworks/vxworks-uart-read-write-programming.html</link>
      <pubDate>Thu, 06 Oct 2022 05:35:25 -0400</pubDate>
      
      <guid>https://www.kontronn.com/post/vxworks/vxworks-uart-read-write-programming.html</guid>
      <description>&lt;p&gt;关于传统的串口编程，在各大操作系统下的流程基本是一致的，只是针对不同的操作系统，函数接口可能有所差异而已，下面讲述VxWorks操作系统下对于串口读写的编程步骤和代码&lt;/p&gt;
&lt;p&gt;相关的&lt;code&gt;VxWorks&lt;/code&gt; 和 &lt;code&gt;串口&lt;/code&gt;，请参阅 
&lt;a href=&#34;https://vxworks.net/app/22-serial-programming-for-vxworks&#34; title=&#34;VxWorks下的串口测试程序设计和源码&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks下的串口测试程序设计和源码
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
